import { __decorate } from "tslib";
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';
import { InputBoolean } from 'ng-zorro-antd/core/util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "ng-zorro-antd/icon";
class NzCronExpressionPreviewComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.TimeList = [];
        this.visible = true;
        this.nzSemantic = null;
        this.loadMorePreview = new EventEmitter();
        this.isExpand = true;
    }
    setExpand() {
        this.isExpand = !this.isExpand;
        this.cdr.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.10", ngImport: i0, type: NzCronExpressionPreviewComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.10", type: NzCronExpressionPreviewComponent, selector: "nz-cron-expression-preview", inputs: { TimeList: "TimeList", visible: "visible", locale: "locale", nzSemantic: "nzSemantic" }, outputs: { loadMorePreview: "loadMorePreview" }, exportAs: ["nzCronExpressionPreview"], ngImport: i0, template: `<div class="ant-collapse ant-collapse-borderless ant-cron-expression-preview">
    <div class="ant-cron-expression-preview-dateTime" [class.ant-cron-expression-preview-dateTime-center]="!isExpand">
      <ng-container *ngIf="visible; else cronError">
        <ng-container *ngIf="!nzSemantic; else semanticTemplate">
          {{ TimeList[0] | date: 'YYYY-MM-dd HH:mm:ss' }}
        </ng-container>
        <ng-template #semanticTemplate [ngTemplateOutlet]="nzSemantic"></ng-template>
      </ng-container>
      <ng-template #cronError>{{ locale.cronError }}</ng-template>
    </div>
    <div *ngIf="visible" class="ant-cron-expression-preview-content">
      <div class="ant-cron-expression-preview-content-date">
        <ng-container *ngIf="!isExpand">
          <ul class="ant-cron-expression-preview-list">
            <li *ngFor="let item of TimeList">
              {{ item | date: 'YYYY-MM-dd HH:mm:ss' }}
            </li>
            <li><a (click)="loadMorePreview.emit()">···</a></li>
          </ul>
        </ng-container>
      </div>
      <ul class="ant-cron-expression-preview-icon">
        <li *ngIf="isExpand"><span nz-icon nzType="down" nzTheme="outline" (click)="setExpand()"></span></li>
        <li *ngIf="!isExpand"><span nz-icon nzType="up" nzTheme="outline" (click)="setExpand()"></span></li>
      </ul>
    </div>
  </div>`, isInline: true, dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.NzIconDirective, selector: "[nz-icon]", inputs: ["nzSpin", "nzRotate", "nzType", "nzTheme", "nzTwotoneColor", "nzIconfont"], exportAs: ["nzIcon"] }, { kind: "pipe", type: i1.DatePipe, name: "date" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
__decorate([
    InputBoolean()
], NzCronExpressionPreviewComponent.prototype, "visible", void 0);
export { NzCronExpressionPreviewComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.10", ngImport: i0, type: NzCronExpressionPreviewComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    selector: 'nz-cron-expression-preview',
                    exportAs: 'nzCronExpressionPreview',
                    template: `<div class="ant-collapse ant-collapse-borderless ant-cron-expression-preview">
    <div class="ant-cron-expression-preview-dateTime" [class.ant-cron-expression-preview-dateTime-center]="!isExpand">
      <ng-container *ngIf="visible; else cronError">
        <ng-container *ngIf="!nzSemantic; else semanticTemplate">
          {{ TimeList[0] | date: 'YYYY-MM-dd HH:mm:ss' }}
        </ng-container>
        <ng-template #semanticTemplate [ngTemplateOutlet]="nzSemantic"></ng-template>
      </ng-container>
      <ng-template #cronError>{{ locale.cronError }}</ng-template>
    </div>
    <div *ngIf="visible" class="ant-cron-expression-preview-content">
      <div class="ant-cron-expression-preview-content-date">
        <ng-container *ngIf="!isExpand">
          <ul class="ant-cron-expression-preview-list">
            <li *ngFor="let item of TimeList">
              {{ item | date: 'YYYY-MM-dd HH:mm:ss' }}
            </li>
            <li><a (click)="loadMorePreview.emit()">···</a></li>
          </ul>
        </ng-container>
      </div>
      <ul class="ant-cron-expression-preview-icon">
        <li *ngIf="isExpand"><span nz-icon nzType="down" nzTheme="outline" (click)="setExpand()"></span></li>
        <li *ngIf="!isExpand"><span nz-icon nzType="up" nzTheme="outline" (click)="setExpand()"></span></li>
      </ul>
    </div>
  </div>`
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { TimeList: [{
                type: Input
            }], visible: [{
                type: Input
            }], locale: [{
                type: Input
            }], nzSemantic: [{
                type: Input
            }], loadMorePreview: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvbi1leHByZXNzaW9uLXByZXZpZXcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY29tcG9uZW50cy9jcm9uLWV4cHJlc3Npb24vY3Jvbi1leHByZXNzaW9uLXByZXZpZXcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7QUFFSCxPQUFPLEVBQ0wsU0FBUyxFQUNULGlCQUFpQixFQUNqQix1QkFBdUIsRUFDdkIsS0FBSyxFQUNMLE1BQU0sRUFDTixZQUFZLEVBR2IsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7O0FBR3ZELE1BaUNhLGdDQUFnQztJQVMzQyxZQUFvQixHQUFzQjtRQUF0QixRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQVJqQyxhQUFRLEdBQVcsRUFBRSxDQUFDO1FBQ04sWUFBTyxHQUFZLElBQUksQ0FBQztRQUV4QyxlQUFVLEdBQTZCLElBQUksQ0FBQztRQUNsQyxvQkFBZSxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7UUFFOUQsYUFBUSxHQUFZLElBQUksQ0FBQztJQUVvQixDQUFDO0lBRTlDLFNBQVM7UUFDUCxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUMvQixJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzFCLENBQUM7K0dBZFUsZ0NBQWdDO21HQUFoQyxnQ0FBZ0MsNFBBNUJqQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7U0EwQkg7O0FBSWtCO0lBQWYsWUFBWSxFQUFFO2lFQUF5QjtTQUZ0QyxnQ0FBZ0M7NEZBQWhDLGdDQUFnQztrQkFqQzVDLFNBQVM7bUJBQUM7b0JBQ1QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxRQUFRLEVBQUUsNEJBQTRCO29CQUN0QyxRQUFRLEVBQUUseUJBQXlCO29CQUNuQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1NBMEJIO2lCQUNSO3dHQUVVLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ21CLE9BQU87c0JBQS9CLEtBQUs7Z0JBQ0csTUFBTTtzQkFBZCxLQUFLO2dCQUNHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBQ2EsZUFBZTtzQkFBakMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBUZW1wbGF0ZVJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgSW5wdXRCb29sZWFuIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL3V0aWwnO1xuaW1wb3J0IHsgTnpDcm9uRXhwcmVzc2lvbkNyb25FcnJvckkxOG4gfSBmcm9tICduZy16b3Jyby1hbnRkL2kxOG4nO1xuXG5AQ29tcG9uZW50KHtcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIHNlbGVjdG9yOiAnbnotY3Jvbi1leHByZXNzaW9uLXByZXZpZXcnLFxuICBleHBvcnRBczogJ256Q3JvbkV4cHJlc3Npb25QcmV2aWV3JyxcbiAgdGVtcGxhdGU6IGA8ZGl2IGNsYXNzPVwiYW50LWNvbGxhcHNlIGFudC1jb2xsYXBzZS1ib3JkZXJsZXNzIGFudC1jcm9uLWV4cHJlc3Npb24tcHJldmlld1wiPlxuICAgIDxkaXYgY2xhc3M9XCJhbnQtY3Jvbi1leHByZXNzaW9uLXByZXZpZXctZGF0ZVRpbWVcIiBbY2xhc3MuYW50LWNyb24tZXhwcmVzc2lvbi1wcmV2aWV3LWRhdGVUaW1lLWNlbnRlcl09XCIhaXNFeHBhbmRcIj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJ2aXNpYmxlOyBlbHNlIGNyb25FcnJvclwiPlxuICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiIW56U2VtYW50aWM7IGVsc2Ugc2VtYW50aWNUZW1wbGF0ZVwiPlxuICAgICAgICAgIHt7IFRpbWVMaXN0WzBdIHwgZGF0ZTogJ1lZWVktTU0tZGQgSEg6bW06c3MnIH19XG4gICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICA8bmctdGVtcGxhdGUgI3NlbWFudGljVGVtcGxhdGUgW25nVGVtcGxhdGVPdXRsZXRdPVwibnpTZW1hbnRpY1wiPjwvbmctdGVtcGxhdGU+XG4gICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgIDxuZy10ZW1wbGF0ZSAjY3JvbkVycm9yPnt7IGxvY2FsZS5jcm9uRXJyb3IgfX08L25nLXRlbXBsYXRlPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgKm5nSWY9XCJ2aXNpYmxlXCIgY2xhc3M9XCJhbnQtY3Jvbi1leHByZXNzaW9uLXByZXZpZXctY29udGVudFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImFudC1jcm9uLWV4cHJlc3Npb24tcHJldmlldy1jb250ZW50LWRhdGVcIj5cbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFpc0V4cGFuZFwiPlxuICAgICAgICAgIDx1bCBjbGFzcz1cImFudC1jcm9uLWV4cHJlc3Npb24tcHJldmlldy1saXN0XCI+XG4gICAgICAgICAgICA8bGkgKm5nRm9yPVwibGV0IGl0ZW0gb2YgVGltZUxpc3RcIj5cbiAgICAgICAgICAgICAge3sgaXRlbSB8IGRhdGU6ICdZWVlZLU1NLWRkIEhIOm1tOnNzJyB9fVxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaT48YSAoY2xpY2spPVwibG9hZE1vcmVQcmV2aWV3LmVtaXQoKVwiPsK3wrfCtzwvYT48L2xpPlxuICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgPC9kaXY+XG4gICAgICA8dWwgY2xhc3M9XCJhbnQtY3Jvbi1leHByZXNzaW9uLXByZXZpZXctaWNvblwiPlxuICAgICAgICA8bGkgKm5nSWY9XCJpc0V4cGFuZFwiPjxzcGFuIG56LWljb24gbnpUeXBlPVwiZG93blwiIG56VGhlbWU9XCJvdXRsaW5lXCIgKGNsaWNrKT1cInNldEV4cGFuZCgpXCI+PC9zcGFuPjwvbGk+XG4gICAgICAgIDxsaSAqbmdJZj1cIiFpc0V4cGFuZFwiPjxzcGFuIG56LWljb24gbnpUeXBlPVwidXBcIiBuelRoZW1lPVwib3V0bGluZVwiIChjbGljayk9XCJzZXRFeHBhbmQoKVwiPjwvc3Bhbj48L2xpPlxuICAgICAgPC91bD5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+YFxufSlcbmV4cG9ydCBjbGFzcyBOekNyb25FeHByZXNzaW9uUHJldmlld0NvbXBvbmVudCB7XG4gIEBJbnB1dCgpIFRpbWVMaXN0OiBEYXRlW10gPSBbXTtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIHZpc2libGU6IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXQoKSBsb2NhbGUhOiBOekNyb25FeHByZXNzaW9uQ3JvbkVycm9ySTE4bjtcbiAgQElucHV0KCkgbnpTZW1hbnRpYzogVGVtcGxhdGVSZWY8dm9pZD4gfCBudWxsID0gbnVsbDtcbiAgQE91dHB1dCgpIHJlYWRvbmx5IGxvYWRNb3JlUHJldmlldyA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICBpc0V4cGFuZDogYm9vbGVhbiA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIHNldEV4cGFuZCgpOiB2b2lkIHtcbiAgICB0aGlzLmlzRXhwYW5kID0gIXRoaXMuaXNFeHBhbmQ7XG4gICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gIH1cbn1cbiJdfQ==