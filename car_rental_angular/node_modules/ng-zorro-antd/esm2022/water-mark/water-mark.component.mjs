/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, Component, Inject, Input } from '@angular/core';
import { getPixelRatio, getStyleStr, reRendering, rotateWatermark } from './util';
import * as i0 from "@angular/core";
/**
 * Base size of the canvas, 1 for parallel layout and 2 for alternate layout
 * Only alternate layout is currently supported
 */
const BaseSize = 2;
const FontGap = 3;
class NzWaterMarkComponent {
    constructor(el, document, cdr) {
        this.el = el;
        this.document = document;
        this.cdr = cdr;
        this.nzWidth = 120;
        this.nzHeight = 64;
        this.nzRotate = -22;
        this.nzZIndex = 9;
        this.nzImage = '';
        this.nzContent = '';
        this.nzFont = {};
        this.nzGap = [100, 100];
        this.nzOffset = [this.nzGap[0] / 2, this.nzGap[1] / 2];
        this.waterMarkElement = this.document.createElement('div');
        this.stopObservation = false;
        this.observer = new MutationObserver(mutations => {
            if (this.stopObservation) {
                return;
            }
            mutations.forEach(mutation => {
                if (reRendering(mutation, this.waterMarkElement)) {
                    this.destroyWatermark();
                    this.renderWatermark();
                }
            });
        });
    }
    ngOnInit() {
        this.observer.observe(this.el.nativeElement, {
            subtree: true,
            childList: true,
            attributeFilter: ['style', 'class']
        });
    }
    ngAfterViewInit() {
        this.renderWatermark();
    }
    ngOnChanges(changes) {
        const { nzRotate, nzZIndex, nzWidth, nzHeight, nzImage, nzContent, nzFont, gapX, gapY, offsetLeft, offsetTop } = changes;
        if (nzRotate ||
            nzZIndex ||
            nzWidth ||
            nzHeight ||
            nzImage ||
            nzContent ||
            nzFont ||
            gapX ||
            gapY ||
            offsetLeft ||
            offsetTop) {
            this.renderWatermark();
        }
    }
    getFont() {
        const font = {
            color: 'rgba(0,0,0,.15)',
            fontSize: 16,
            fontWeight: 'normal',
            fontFamily: 'sans-serif',
            fontStyle: 'normal'
        };
        this.nzFont = { ...font, ...this.nzFont };
        this.cdr.markForCheck();
    }
    getMarkStyle() {
        const markStyle = {
            zIndex: this.nzZIndex,
            position: 'absolute',
            left: 0,
            top: 0,
            width: '100%',
            height: '100%',
            pointerEvents: 'none',
            backgroundRepeat: 'repeat'
        };
        /** Calculate the style of the nzOffset */
        let positionLeft = (this.nzOffset?.[0] ?? this.nzGap[0] / 2) - this.nzGap[0] / 2;
        let positionTop = (this.nzOffset?.[1] ?? this.nzGap[1] / 2) - this.nzGap[1] / 2;
        if (positionLeft > 0) {
            markStyle.left = `${positionLeft}px`;
            markStyle.width = `calc(100% - ${positionLeft}px)`;
            positionLeft = 0;
        }
        if (positionTop > 0) {
            markStyle.top = `${positionTop}px`;
            markStyle.height = `calc(100% - ${positionTop}px)`;
            positionTop = 0;
        }
        markStyle.backgroundPosition = `${positionLeft}px ${positionTop}px`;
        return markStyle;
    }
    destroyWatermark() {
        if (this.waterMarkElement) {
            this.waterMarkElement.remove();
        }
    }
    appendWatermark(base64Url, markWidth) {
        this.stopObservation = true;
        this.waterMarkElement.setAttribute('style', getStyleStr({
            ...this.getMarkStyle(),
            backgroundImage: `url('${base64Url}')`,
            backgroundSize: `${(this.nzGap[0] + markWidth) * BaseSize}px`
        }));
        this.el.nativeElement.append(this.waterMarkElement);
        this.cdr.markForCheck();
        // Delayed execution
        setTimeout(() => {
            this.stopObservation = false;
            this.cdr.markForCheck();
        });
    }
    getMarkSize(ctx) {
        let defaultWidth = 120;
        let defaultHeight = 64;
        if (!this.nzImage && ctx.measureText) {
            ctx.font = `${Number(this.nzFont.fontSize)}px ${this.nzFont.fontFamily}`;
            const contents = Array.isArray(this.nzContent) ? this.nzContent : [this.nzContent];
            const widths = contents.map(item => ctx.measureText(item).width);
            defaultWidth = Math.ceil(Math.max(...widths));
            defaultHeight = Number(this.nzFont.fontSize) * contents.length + (contents.length - 1) * FontGap;
        }
        return [this.nzWidth ?? defaultWidth, this.nzHeight ?? defaultHeight];
    }
    fillTexts(ctx, drawX, drawY, drawWidth, drawHeight) {
        const ratio = getPixelRatio();
        const mergedFontSize = Number(this.nzFont.fontSize) * ratio;
        ctx.font = `${this.nzFont.fontStyle} normal ${this.nzFont.fontWeight} ${mergedFontSize}px/${drawHeight}px ${this.nzFont.fontFamily}`;
        if (this.nzFont.color)
            ctx.fillStyle = this.nzFont.color;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'top';
        ctx.translate(drawWidth / 2, 0);
        const contents = Array.isArray(this.nzContent) ? this.nzContent : [this.nzContent];
        contents?.forEach((item, index) => {
            ctx.fillText(item ?? '', drawX, drawY + index * (mergedFontSize + FontGap * ratio));
        });
    }
    drawText(canvas, ctx, drawX, drawY, drawWidth, drawHeight, alternateRotateX, alternateRotateY, alternateDrawX, alternateDrawY, markWidth) {
        this.fillTexts(ctx, drawX, drawY, drawWidth, drawHeight);
        /** Fill the interleaved text after rotation */
        ctx.restore();
        rotateWatermark(ctx, alternateRotateX, alternateRotateY, this.nzRotate);
        this.fillTexts(ctx, alternateDrawX, alternateDrawY, drawWidth, drawHeight);
        this.appendWatermark(canvas.toDataURL(), markWidth);
    }
    renderWatermark() {
        if (!this.nzContent && !this.nzImage) {
            return;
        }
        const canvas = this.document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        if (ctx) {
            if (!this.waterMarkElement) {
                this.waterMarkElement = this.document.createElement('div');
            }
            this.getFont();
            const ratio = getPixelRatio();
            const [markWidth, markHeight] = this.getMarkSize(ctx);
            const canvasWidth = (this.nzGap[0] + markWidth) * ratio;
            const canvasHeight = (this.nzGap[1] + markHeight) * ratio;
            canvas.setAttribute('width', `${canvasWidth * BaseSize}px`);
            canvas.setAttribute('height', `${canvasHeight * BaseSize}px`);
            const drawX = (this.nzGap[0] * ratio) / 2;
            const drawY = (this.nzGap[1] * ratio) / 2;
            const drawWidth = markWidth * ratio;
            const drawHeight = markHeight * ratio;
            const rotateX = (drawWidth + this.nzGap[0] * ratio) / 2;
            const rotateY = (drawHeight + this.nzGap[1] * ratio) / 2;
            /** Alternate drawing parameters */
            const alternateDrawX = drawX + canvasWidth;
            const alternateDrawY = drawY + canvasHeight;
            const alternateRotateX = rotateX + canvasWidth;
            const alternateRotateY = rotateY + canvasHeight;
            ctx.save();
            rotateWatermark(ctx, rotateX, rotateY, this.nzRotate);
            if (this.nzImage) {
                const img = new Image();
                img.onload = () => {
                    ctx.drawImage(img, drawX, drawY, drawWidth, drawHeight);
                    /** Draw interleaved pictures after rotation */
                    ctx.restore();
                    rotateWatermark(ctx, alternateRotateX, alternateRotateY, this.nzRotate);
                    ctx.drawImage(img, alternateDrawX, alternateDrawY, drawWidth, drawHeight);
                    this.appendWatermark(canvas.toDataURL(), markWidth);
                };
                img.onerror = () => this.drawText(canvas, ctx, drawX, drawY, drawWidth, drawHeight, alternateRotateX, alternateRotateY, alternateDrawX, alternateDrawY, markWidth);
                img.crossOrigin = 'anonymous';
                img.referrerPolicy = 'no-referrer';
                img.src = this.nzImage;
            }
            else {
                this.drawText(canvas, ctx, drawX, drawY, drawWidth, drawHeight, alternateRotateX, alternateRotateY, alternateDrawX, alternateDrawY, markWidth);
            }
        }
    }
    ngOnDestroy() {
        this.observer.disconnect();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.10", ngImport: i0, type: NzWaterMarkComponent, deps: [{ token: i0.ElementRef }, { token: DOCUMENT }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.10", type: NzWaterMarkComponent, selector: "nz-water-mark", inputs: { nzWidth: "nzWidth", nzHeight: "nzHeight", nzRotate: "nzRotate", nzZIndex: "nzZIndex", nzImage: "nzImage", nzContent: "nzContent", nzFont: "nzFont", nzGap: "nzGap", nzOffset: "nzOffset" }, host: { classAttribute: "ant-water-mark" }, exportAs: ["NzWaterMark"], usesOnChanges: true, ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { NzWaterMarkComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.10", ngImport: i0, type: NzWaterMarkComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'nz-water-mark',
                    exportAs: 'NzWaterMark',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: ` <ng-content></ng-content> `,
                    host: {
                        class: 'ant-water-mark'
                    }
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { nzWidth: [{
                type: Input
            }], nzHeight: [{
                type: Input
            }], nzRotate: [{
                type: Input
            }], nzZIndex: [{
                type: Input
            }], nzImage: [{
                type: Input
            }], nzContent: [{
                type: Input
            }], nzFont: [{
                type: Input
            }], nzGap: [{
                type: Input
            }], nzOffset: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0ZXItbWFyay5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9jb21wb25lbnRzL3dhdGVyLW1hcmsvd2F0ZXItbWFyay5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUgsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFFTCx1QkFBdUIsRUFFdkIsU0FBUyxFQUVULE1BQU0sRUFDTixLQUFLLEVBS04sTUFBTSxlQUFlLENBQUM7QUFHdkIsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxNQUFNLFFBQVEsQ0FBQzs7QUFFbEY7OztHQUdHO0FBQ0gsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFDO0FBQ25CLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQztBQUVsQixNQVNhLG9CQUFvQjtJQTBCL0IsWUFBb0IsRUFBYyxFQUE0QixRQUFrQixFQUFVLEdBQXNCO1FBQTVGLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBNEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBekJ2RyxZQUFPLEdBQVcsR0FBRyxDQUFDO1FBQ3RCLGFBQVEsR0FBVyxFQUFFLENBQUM7UUFDdEIsYUFBUSxHQUFXLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLGFBQVEsR0FBVyxDQUFDLENBQUM7UUFDckIsWUFBTyxHQUFXLEVBQUUsQ0FBQztRQUNyQixjQUFTLEdBQXNCLEVBQUUsQ0FBQztRQUNsQyxXQUFNLEdBQWEsRUFBRSxDQUFDO1FBQ3RCLFVBQUssR0FBcUIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDckMsYUFBUSxHQUFxQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdB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QUFDO2FBQzVEO1lBQ0QsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2YsTUFBTSxLQUFLLEdBQUcsYUFBYSxFQUFFLENBQUM7WUFDOUIsTUFBTSxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RELE1BQU0sV0FBVyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDeEQsTUFBTSxZQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUMxRCxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxHQUFHLFdBQVcsR0FBRyxRQUFRLElBQUksQ0FBQyxDQUFDO1lBQzVELE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLEdBQUcsWUFBWSxHQUFHLFFBQVEsSUFBSSxDQUFDLENBQUM7WUFFOUQsTUFBTSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMxQyxNQUFNLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzFDLE1BQU0sU0FBUyxHQUFHLFNBQVMsR0FBRyxLQUFLLENBQUM7WUFDcEMsTUFBTSxVQUFVLEdBQUcsVUFBVSxHQUFHLEtBQUssQ0FBQztZQUN0QyxNQUFNLE9BQU8sR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN4RCxNQUFNLE9BQU8sR0FBRyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFH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LCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgSW5qZWN0LFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgU2ltcGxlQ2hhbmdlc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTWFya1N0eWxlVHlwZSwgRm9udFR5cGUgfSBmcm9tICcuL3R5cGluZ3MnO1xuaW1wb3J0IHsgZ2V0UGl4ZWxSYXRpbywgZ2V0U3R5bGVTdHIsIHJlUmVuZGVyaW5nLCByb3RhdGVXYXRlcm1hcmsgfSBmcm9tICcuL3V0aWwnO1xuXG4vKipcbiAqIEJhc2Ugc2l6ZSBvZiB0aGUgY2FudmFzLCAxIGZvciBwYXJhbGxlbCBsYXlvdXQgYW5kIDIgZm9yIGFsdGVybmF0ZSBsYXlvdXRcbiAqIE9ubHkgYWx0ZXJuYXRlIGxheW91dCBpcyBjdXJyZW50bHkgc3VwcG9ydGVkXG4gKi9cbmNvbnN0IEJhc2VTaXplID0gMjtcbmNvbnN0IEZvbnRHYXAgPSAzO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduei13YXRlci1tYXJrJyxcbiAgZXhwb3J0QXM6ICdOeldhdGVyTWFyaycsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogYCA8bmctY29udGVudD48L25nLWNvbnRlbnQ+IGAsXG4gIGhvc3Q6IHtcbiAgICBjbGFzczogJ2FudC13YXRlci1tYXJrJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE56V2F0ZXJNYXJrQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIG56V2lkdGg6IG51bWJlciA9IDEyMDtcbiAgQElucHV0KCkgbnpIZWlnaHQ6IG51bWJlciA9IDY0O1xuICBASW5wdXQoKSBuelJvdGF0ZTogbnVtYmVyID0gLTIyO1xuICBASW5wdXQoKSBuelpJbmRleDogbnVtYmVyID0gOTtcbiAgQElucHV0KCkgbnpJbWFnZTogc3RyaW5nID0gJyc7XG4gIEBJbnB1dCgpIG56Q29udGVudDogc3RyaW5nIHwgc3RyaW5nW10gPSAnJztcbiAgQElucHV0KCkgbnpGb250OiBGb250VHlwZSA9IHt9O1xuICBASW5wdXQoKSBuekdhcDogW251bWJlciwgbnVtYmVyXSA9IFsxMDAsIDEwMF07XG4gIEBJbnB1dCgpIG56T2Zmc2V0OiBbbnVtYmVyLCBudW1iZXJdID0gW3RoaXMubnpHYXBbMF0gLyAyLCB0aGlzLm56R2FwWzFdIC8gMl07XG5cbiAgd2F0ZXJNYXJrRWxlbWVudDogSFRNTERpdkVsZW1lbnQgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBzdG9wT2JzZXJ2YXRpb246IGJvb2xlYW4gPSBmYWxzZTtcblxuICBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKG11dGF0aW9ucyA9PiB7XG4gICAgaWYgKHRoaXMuc3RvcE9ic2VydmF0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG11dGF0aW9ucy5mb3JFYWNoKG11dGF0aW9uID0+IHtcbiAgICAgIGlmIChyZVJlbmRlcmluZyhtdXRhdGlvbiwgdGhpcy53YXRlck1hcmtFbGVtZW50KSkge1xuICAgICAgICB0aGlzLmRlc3Ryb3lXYXRlcm1hcmsoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJXYXRlcm1hcmsoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnQsIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLm9ic2VydmVyLm9ic2VydmUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCB7XG4gICAgICBzdWJ0cmVlOiB0cnVlLFxuICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgYXR0cmlidXRlRmlsdGVyOiBbJ3N0eWxlJywgJ2NsYXNzJ11cbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnJlbmRlcldhdGVybWFyaygpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGNvbnN0IHsgbnpSb3RhdGUsIG56WkluZGV4LCBueldpZHRoLCBuekhlaWdodCwgbnpJbWFnZSwgbnpDb250ZW50LCBuekZvbnQsIGdhcFgsIGdhcFksIG9mZnNldExlZnQsIG9mZnNldFRvcCB9ID1cbiAgICAgIGNoYW5nZXM7XG5cbiAgICBpZiAoXG4gICAgICBuelJvdGF0ZSB8fFxuICAgICAgbnpaSW5kZXggfHxcbiAgICAgIG56V2lkdGggfHxcbiAgICAgIG56SGVpZ2h0IHx8XG4gICAgICBuekltYWdlIHx8XG4gICAgICBuekNvbnRlbnQgfHxcbiAgICAgIG56Rm9udCB8fFxuICAgICAgZ2FwWCB8fFxuICAgICAgZ2FwWSB8fFxuICAgICAgb2Zmc2V0TGVmdCB8fFxuICAgICAgb2Zmc2V0VG9wXG4gICAgKSB7XG4gICAgICB0aGlzLnJlbmRlcldhdGVybWFyaygpO1xuICAgIH1cbiAgfVxuXG4gIGdldEZvbnQoKTogdm9pZCB7XG4gICAgY29uc3QgZm9udDogRm9udFR5cGUgPSB7XG4gICAgICBjb2xvcjogJ3JnYmEoMCwwLDAsLjE1KScsXG4gICAgICBmb250U2l6ZTogMTYsXG4gICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgIGZvbnRGYW1pbHk6ICdzYW5zLXNlcmlmJyxcbiAgICAgIGZvbnRTdHlsZTogJ25vcm1hbCdcbiAgICB9O1xuXG4gICAgdGhpcy5uekZvbnQgPSB7IC4uLmZvbnQsIC4uLnRoaXMubnpGb250IH07XG4gICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICBnZXRNYXJrU3R5bGUoKTogTWFya1N0eWxlVHlwZSB7XG4gICAgY29uc3QgbWFya1N0eWxlOiBNYXJrU3R5bGVUeXBlID0ge1xuICAgICAgekluZGV4OiB0aGlzLm56WkluZGV4LFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgYmFja2dyb3VuZFJlcGVhdDogJ3JlcGVhdCdcbiAgICB9O1xuXG4gICAgLyoqIENhbGN1bGF0ZSB0aGUgc3R5bGUgb2YgdGhlIG56T2Zmc2V0ICovXG4gICAgbGV0IHBvc2l0aW9uTGVmdCA9ICh0aGlzLm56T2Zmc2V0Py5bMF0gPz8gdGhpcy5uekdhcFswXSAvIDIpIC0gdGhpcy5uekdhcFswXSAvIDI7XG4gICAgbGV0IHBvc2l0aW9uVG9wID0gKHRoaXMubnpPZmZzZXQ/LlsxXSA/PyB0aGlzLm56R2FwWzFdIC8gMikgLSB0aGlzLm56R2FwWzFdIC8gMjtcbiAgICBpZiAocG9zaXRpb25MZWZ0ID4gMCkge1xuICAgICAgbWFya1N0eWxlLmxlZnQgPSBgJHtwb3NpdGlvbkxlZnR9cHhgO1xuICAgICAgbWFya1N0eWxlLndpZHRoID0gYGNhbGMoMTAwJSAtICR7cG9zaXRpb25MZWZ0fXB4KWA7XG4gICAgICBwb3NpdGlvbkxlZnQgPSAwO1xuICAgIH1cbiAgICBpZiAocG9zaXRpb25Ub3AgPiAwKSB7XG4gICAgICBtYXJrU3R5bGUudG9wID0gYCR7cG9zaXRpb25Ub3B9cHhgO1xuICAgICAgbWFya1N0eWxlLmhlaWdodCA9IGBjYWxjKDEwMCUgLSAke3Bvc2l0aW9uVG9wfXB4KWA7XG4gICAgICBwb3NpdGlvblRvcCA9IDA7XG4gICAgfVxuICAgIG1hcmtTdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb24gPSBgJHtwb3NpdGlvbkxlZnR9cHggJHtwb3NpdGlvblRvcH1weGA7XG5cbiAgICByZXR1cm4gbWFya1N0eWxlO1xuICB9XG5cbiAgZGVzdHJveVdhdGVybWFyaygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy53YXRlck1hcmtFbGVtZW50KSB7XG4gICAgICB0aGlzLndhdGVyTWFya0VsZW1lbnQucmVtb3ZlKCk7XG4gICAgfVxuICB9XG5cbiAgYXBwZW5kV2F0ZXJtYXJrKGJhc2U2NFVybDogc3RyaW5nLCBtYXJrV2lkdGg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuc3RvcE9ic2VydmF0aW9uID0gdHJ1ZTtcbiAgICB0aGlzLndhdGVyTWFya0VsZW1lbnQuc2V0QXR0cmlidXRlKFxuICAgICAgJ3N0eWxlJyxcbiAgICAgIGdldFN0eWxlU3RyKHtcbiAgICAgICAgLi4udGhpcy5nZXRNYXJrU3R5bGUoKSxcbiAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCcke2Jhc2U2NFVybH0nKWAsXG4gICAgICAgIGJhY2tncm91bmRTaXplOiBgJHsodGhpcy5uekdhcFswXSArIG1hcmtXaWR0aCkgKiBCYXNlU2l6ZX1weGBcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuYXBwZW5kKHRoaXMud2F0ZXJNYXJrRWxlbWVudCk7XG4gICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG5cbiAgICAvLyBEZWxheWVkIGV4ZWN1dGlvblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5zdG9wT2JzZXJ2YXRpb24gPSBmYWxzZTtcbiAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0TWFya1NpemUoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiBbbnVtYmVyLCBudW1iZXJdIHtcbiAgICBsZXQgZGVmYXVsdFdpZHRoID0gMTIwO1xuICAgIGxldCBkZWZhdWx0SGVpZ2h0ID0gNjQ7XG4gICAgaWYgKCF0aGlzLm56SW1hZ2UgJiYgY3R4Lm1lYXN1cmVUZXh0KSB7XG4gICAgICBjdHguZm9udCA9IGAke051bWJlcih0aGlzLm56Rm9udC5mb250U2l6ZSl9cHggJHt0aGlzLm56Rm9udC5mb250RmFtaWx5fWA7XG4gICAgICBjb25zdCBjb250ZW50cyA9IEFycmF5LmlzQXJyYXkodGhpcy5uekNvbnRlbnQpID8gdGhpcy5uekNvbnRlbnQgOiBbdGhpcy5uekNvbnRlbnRdO1xuICAgICAgY29uc3Qgd2lkdGhzID0gY29udGVudHMubWFwKGl0ZW0gPT4gY3R4Lm1lYXN1cmVUZXh0KGl0ZW0hKS53aWR0aCk7XG4gICAgICBkZWZhdWx0V2lkdGggPSBNYXRoLmNlaWwoTWF0aC5tYXgoLi4ud2lkdGhzKSk7XG4gICAgICBkZWZhdWx0SGVpZ2h0ID0gTnVtYmVyKHRoaXMubnpGb250LmZvbnRTaXplKSAqIGNvbnRlbnRzLmxlbmd0aCArIChjb250ZW50cy5sZW5ndGggLSAxKSAqIEZvbnRHYXA7XG4gICAgfVxuICAgIHJldHVybiBbdGhpcy5ueldpZHRoID8/IGRlZmF1bHRXaWR0aCwgdGhpcy5uekhlaWdodCA/PyBkZWZhdWx0SGVpZ2h0XTtcbiAgfVxuXG4gIGZpbGxUZXh0cyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgZHJhd1g6IG51bWJlciwgZHJhd1k6IG51bWJlciwgZHJhd1dpZHRoOiBudW1iZXIsIGRyYXdIZWlnaHQ6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHJhdGlvID0gZ2V0UGl4ZWxSYXRpbygpO1xuICAgIGNvbnN0IG1lcmdlZEZvbnRTaXplID0gTnVtYmVyKHRoaXMubnpGb250LmZvbnRTaXplKSAqIHJhdGlvO1xuICAgIGN0eC5mb250ID0gYCR7dGhpcy5uekZvbnQuZm9udFN0eWxlfSBub3JtYWwgJHt0aGlzLm56Rm9udC5mb250V2VpZ2h0fSAke21lcmdlZEZvbnRTaXplfXB4LyR7ZHJhd0hlaWdodH1weCAke3RoaXMubnpGb250LmZvbnRGYW1pbHl9YDtcbiAgICBpZiAodGhpcy5uekZvbnQuY29sb3IpIGN0eC5maWxsU3R5bGUgPSB0aGlzLm56Rm9udC5jb2xvcjtcbiAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgY3R4LnRleHRCYXNlbGluZSA9ICd0b3AnO1xuICAgIGN0eC50cmFuc2xhdGUoZHJhd1dpZHRoIC8gMiwgMCk7XG4gICAgY29uc3QgY29udGVudHMgPSBBcnJheS5pc0FycmF5KHRoaXMubnpDb250ZW50KSA/IHRoaXMubnpDb250ZW50IDogW3RoaXMubnpDb250ZW50XTtcbiAgICBjb250ZW50cz8uZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGN0eC5maWxsVGV4dChpdGVtID8/ICcnLCBkcmF3WCwgZHJhd1kgKyBpbmRleCAqIChtZXJnZWRGb250U2l6ZSArIEZvbnRHYXAgKiByYXRpbykpO1xuICAgIH0pO1xuICB9XG5cbiAgZHJhd1RleHQoXG4gICAgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCxcbiAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgICBkcmF3WDogbnVtYmVyLFxuICAgIGRyYXdZOiBudW1iZXIsXG4gICAgZHJhd1dpZHRoOiBudW1iZXIsXG4gICAgZHJhd0hlaWdodDogbnVtYmVyLFxuICAgIGFsdGVybmF0ZVJvdGF0ZVg6IG51bWJlcixcbiAgICBhbHRlcm5hdGVSb3RhdGVZOiBudW1iZXIsXG4gICAgYWx0ZXJuYXRlRHJhd1g6IG51bWJlcixcbiAgICBhbHRlcm5hdGVEcmF3WTogbnVtYmVyLFxuICAgIG1hcmtXaWR0aDogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIHRoaXMuZmlsbFRleHRzKGN0eCwgZHJhd1gsIGRyYXdZLCBkcmF3V2lkdGgsIGRyYXdIZWlnaHQpO1xuXG4gICAgLyoqIEZpbGwgdGhlIGludGVybGVhdmVkIHRleHQgYWZ0ZXIgcm90YXRpb24gKi9cbiAgICBjdHgucmVzdG9yZSgpO1xuICAgIHJvdGF0ZVdhdGVybWFyayhjdHgsIGFsdGVybmF0ZVJvdGF0ZVgsIGFsdGVybmF0ZVJvdGF0ZVksIHRoaXMubnpSb3RhdGUpO1xuICAgIHRoaXMuZmlsbFRleHRzKGN0eCwgYWx0ZXJuYXRlRHJhd1gsIGFsdGVybmF0ZURyYXdZLCBkcmF3V2lkdGgsIGRyYXdIZWlnaHQpO1xuICAgIHRoaXMuYXBwZW5kV2F0ZXJtYXJrKGNhbnZhcy50b0RhdGFVUkwoKSwgbWFya1dpZHRoKTtcbiAgfVxuXG4gIHJlbmRlcldhdGVybWFyaygpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMubnpDb250ZW50ICYmICF0aGlzLm56SW1hZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJykgYXMgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xuXG4gICAgaWYgKGN0eCkge1xuICAgICAgaWYgKCF0aGlzLndhdGVyTWFya0VsZW1lbnQpIHtcbiAgICAgICAgdGhpcy53YXRlck1hcmtFbGVtZW50ID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZ2V0Rm9udCgpO1xuICAgICAgY29uc3QgcmF0aW8gPSBnZXRQaXhlbFJhdGlvKCk7XG4gICAgICBjb25zdCBbbWFya1dpZHRoLCBtYXJrSGVpZ2h0XSA9IHRoaXMuZ2V0TWFya1NpemUoY3R4KTtcbiAgICAgIGNvbnN0IGNhbnZhc1dpZHRoID0gKHRoaXMubnpHYXBbMF0gKyBtYXJrV2lkdGgpICogcmF0aW87XG4gICAgICBjb25zdCBjYW52YXNIZWlnaHQgPSAodGhpcy5uekdhcFsxXSArIG1hcmtIZWlnaHQpICogcmF0aW87XG4gICAgICBjYW52YXMuc2V0QXR0cmlidXRlKCd3aWR0aCcsIGAke2NhbnZhc1dpZHRoICogQmFzZVNpemV9cHhgKTtcbiAgICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIGAke2NhbnZhc0hlaWdodCAqIEJhc2VTaXplfXB4YCk7XG5cbiAgICAgIGNvbnN0IGRyYXdYID0gKHRoaXMubnpHYXBbMF0gKiByYXRpbykgLyAyO1xuICAgICAgY29uc3QgZHJhd1kgPSAodGhpcy5uekdhcFsxXSAqIHJhdGlvKSAvIDI7XG4gICAgICBjb25zdCBkcmF3V2lkdGggPSBtYXJrV2lkdGggKiByYXRpbztcbiAgICAgIGNvbnN0IGRyYXdIZWlnaHQgPSBtYXJrSGVpZ2h0ICogcmF0aW87XG4gICAgICBjb25zdCByb3RhdGVYID0gKGRyYXdXaWR0aCArIHRoaXMubnpHYXBbMF0gKiByYXRpbykgLyAyO1xuICAgICAgY29uc3Qgcm90YXRlWSA9IChkcmF3SGVpZ2h0ICsgdGhpcy5uekdhcFsxXSAqIHJhdGlvKSAvIDI7XG5cbiAgICAgIC8qKiBBbHRlcm5hdGUgZHJhd2luZyBwYXJhbWV0ZXJzICovXG4gICAgICBjb25zdCBhbHRlcm5hdGVEcmF3WCA9IGRyYXdYICsgY2FudmFzV2lkdGg7XG4gICAgICBjb25zdCBhbHRlcm5hdGVEcmF3WSA9IGRyYXdZICsgY2FudmFzSGVpZ2h0O1xuICAgICAgY29uc3QgYWx0ZXJuYXRlUm90YXRlWCA9IHJvdGF0ZVggKyBjYW52YXNXaWR0aDtcbiAgICAgIGNvbnN0IGFsdGVybmF0ZVJvdGF0ZVkgPSByb3RhdGVZICsgY2FudmFzSGVpZ2h0O1xuXG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgcm90YXRlV2F0ZXJtYXJrKGN0eCwgcm90YXRlWCwgcm90YXRlWSwgdGhpcy5uelJvdGF0ZSk7XG5cbiAgICAgIGlmICh0aGlzLm56SW1hZ2UpIHtcbiAgICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgIGltZy5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIGRyYXdYLCBkcmF3WSwgZHJhd1dpZHRoLCBkcmF3SGVpZ2h0KTtcblxuICAgICAgICAgIC8qKiBEcmF3IGludGVybGVhdmVkIHBpY3R1cmVzIGFmdGVyIHJvdGF0aW9uICovXG4gICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICByb3RhdGVXYXRlcm1hcmsoY3R4LCBhbHRlcm5hdGVSb3RhdGVYLCBhbHRlcm5hdGVSb3RhdGVZLCB0aGlzLm56Um90YXRlKTtcbiAgICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgYWx0ZXJuYXRlRHJhd1gsIGFsdGVybmF0ZURyYXdZLCBkcmF3V2lkdGgsIGRyYXdIZWlnaHQpO1xuICAgICAgICAgIHRoaXMuYXBwZW5kV2F0ZXJtYXJrKGNhbnZhcy50b0RhdGFVUkwoKSwgbWFya1dpZHRoKTtcbiAgICAgICAgfTtcbiAgICAgICAgaW1nLm9uZXJyb3IgPSAoKSA9PlxuICAgICAgICAgIHRoaXMuZHJhd1RleHQoXG4gICAgICAgICAgICBjYW52YXMsXG4gICAgICAgICAgICBjdHgsXG4gICAgICAgICAgICBkcmF3WCxcbiAgICAgICAgICAgIGRyYXdZLFxuICAgICAgICAgICAgZHJhd1dpZHRoLFxuICAgICAgICAgICAgZHJhd0hlaWdodCxcbiAgICAgICAgICAgIGFsdGVybmF0ZVJvdGF0ZVgsXG4gICAgICAgICAgICBhbHRlcm5hdGVSb3RhdGVZLFxuICAgICAgICAgICAgYWx0ZXJuYXRlRHJhd1gsXG4gICAgICAgICAgICBhbHRlcm5hdGVEcmF3WSxcbiAgICAgICAgICAgIG1hcmtXaWR0aFxuICAgICAgICAgICk7XG4gICAgICAgIGltZy5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnO1xuICAgICAgICBpbWcucmVmZXJyZXJQb2xpY3kgPSAnbm8tcmVmZXJyZXInO1xuICAgICAgICBpbWcuc3JjID0gdGhpcy5uekltYWdlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kcmF3VGV4dChcbiAgICAgICAgICBjYW52YXMsXG4gICAgICAgICAgY3R4LFxuICAgICAgICAgIGRyYXdYLFxuICAgICAgICAgIGRyYXdZLFxuICAgICAgICAgIGRyYXdXaWR0aCxcbiAgICAgICAgICBkcmF3SGVpZ2h0LFxuICAgICAgICAgIGFsdGVybmF0ZVJvdGF0ZVgsXG4gICAgICAgICAgYWx0ZXJuYXRlUm90YXRlWSxcbiAgICAgICAgICBhbHRlcm5hdGVEcmF3WCxcbiAgICAgICAgICBhbHRlcm5hdGVEcmF3WSxcbiAgICAgICAgICBtYXJrV2lkdGhcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgfVxufVxuIl19