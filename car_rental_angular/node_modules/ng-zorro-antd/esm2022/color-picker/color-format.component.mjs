/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, Component, Input, Output, EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime, filter, takeUntil } from 'rxjs/operators';
import { generateColor } from 'ng-antd-color-picker';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@angular/common";
import * as i3 from "ng-zorro-antd/select";
import * as i4 from "ng-zorro-antd/input-number";
import * as i5 from "ng-zorro-antd/input";
class NzColorFormatComponent {
    validatorFn() {
        return (control) => {
            const REGEXP = /^[0-9a-fA-F]{6}$/;
            if (!control.value) {
                return { error: true };
            }
            else if (!REGEXP.test(control.value)) {
                return { error: true };
            }
            return null;
        };
    }
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.format = null;
        this.colorValue = '';
        this.clearColor = false;
        this.formatChange = new EventEmitter();
        this.nzOnFormatChange = new EventEmitter();
        this.destroy$ = new Subject();
        this.formatterPercent = (value) => `${value} %`;
        this.parserPercent = (value) => value.replace(' %', '');
        this.validateForm = this.formBuilder.nonNullable.group({
            isFormat: this.formBuilder.control('hex'),
            hex: this.formBuilder.control('1677FF', this.validatorFn()),
            hsbH: 215,
            hsbS: 91,
            hsbB: 100,
            rgbR: 22,
            rgbG: 119,
            rgbB: 255,
            roundA: 100
        });
    }
    ngOnInit() {
        this.validateForm.valueChanges
            .pipe(filter(() => this.validateForm.valid), debounceTime(200), takeUntil(this.destroy$))
            .subscribe(value => {
            let color = '';
            switch (value.isFormat) {
                case 'hsb':
                    color = generateColor({
                        h: Number(value.hsbH),
                        s: Number(value.hsbS) / 100,
                        b: Number(value.hsbB) / 100,
                        a: Number(value.roundA) / 100
                    }).toHsbString();
                    break;
                case 'rgb':
                    color = generateColor({
                        r: Number(value.rgbR),
                        g: Number(value.rgbG),
                        b: Number(value.rgbB),
                        a: Number(value.roundA) / 100
                    }).toRgbString();
                    break;
                default:
                    const hex = generateColor(value.hex);
                    const hexColor = generateColor({
                        r: hex.r,
                        g: hex.g,
                        b: hex.b,
                        a: Number(value.roundA) / 100
                    });
                    color = hexColor.getAlpha() < 1 ? hexColor.toHex8String() : hexColor.toHexString();
                    break;
            }
            this.formatChange.emit({ color, format: value.isFormat || this.format || 'hex' });
        });
        this.validateForm
            .get('isFormat')
            ?.valueChanges.pipe(takeUntil(this.destroy$))
            .subscribe(value => {
            this.nzOnFormatChange.emit(value);
        });
    }
    ngOnChanges(changes) {
        const { colorValue, format, clearColor } = changes;
        if (colorValue) {
            const colorValue = {
                hex: generateColor(this.colorValue).toHex(),
                hsbH: Math.round(generateColor(this.colorValue).toHsb().h),
                hsbS: Math.round(generateColor(this.colorValue).toHsb().s * 100),
                hsbB: Math.round(generateColor(this.colorValue).toHsb().b * 100),
                rgbR: Math.round(generateColor(this.colorValue).r),
                rgbG: Math.round(generateColor(this.colorValue).g),
                rgbB: Math.round(generateColor(this.colorValue).b),
                roundA: Math.round(generateColor(this.colorValue).roundA * 100)
            };
            this.validateForm.patchValue(colorValue);
        }
        if (format && this.format) {
            this.validateForm.get('isFormat')?.patchValue(this.format);
        }
        if (clearColor && this.clearColor) {
            this.validateForm.get('roundA')?.patchValue(0);
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.10", ngImport: i0, type: NzColorFormatComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.10", type: NzColorFormatComponent, selector: "nz-color-format", inputs: { format: "format", colorValue: "colorValue", clearColor: "clearColor" }, outputs: { formatChange: "formatChange", nzOnFormatChange: "nzOnFormatChange" }, exportAs: ["NzColorFormat"], usesOnChanges: true, ngImport: i0, template: `
    <div [formGroup]="validateForm" class="ant-color-picker-input-container">
      <div class="ant-color-picker-format-select">
        <nz-select formControlName="isFormat" nzBorderless nzSize="small">
          <nz-option nzValue="hex" nzLabel="HEX"></nz-option>
          <nz-option nzValue="hsb" nzLabel="HSB"></nz-option>
          <nz-option nzValue="rgb" nzLabel="RGB"></nz-option>
        </nz-select>
      </div>
      <div class="ant-color-picker-input" [ngSwitch]="validateForm.get('isFormat')?.value">
        <div class="ant-color-picker-hex-input" *ngSwitchCase="'hex'">
          <nz-input-group nzPrefix="#" nzSize="small">
            <input nz-input nzSize="small" formControlName="hex" />
          </nz-input-group>
        </div>

        <div class="ant-color-picker-hsb-input" *ngSwitchCase="'hsb'">
          <div class="ant-color-picker-steppers ant-color-picker-hsb-input">
            <nz-input-number
              formControlName="hsbH"
              [nzMin]="0"
              [nzMax]="360"
              [nzStep]="1"
              [nzPrecision]="0"
              nzSize="small"
            ></nz-input-number>
          </div>
          <div class="ant-color-picker-steppers ant-color-picker-hsb-input">
            <nz-input-number
              formControlName="hsbS"
              [nzMin]="0"
              [nzMax]="100"
              [nzStep]="1"
              [nzFormatter]="formatterPercent"
              [nzParser]="parserPercent"
              nzSize="small"
            ></nz-input-number>
          </div>
          <div class="ant-color-picker-steppers ant-color-picker-hsb-input">
            <nz-input-number
              formControlName="hsbB"
              [nzMin]="0"
              [nzMax]="100"
              [nzStep]="1"
              [nzFormatter]="formatterPercent"
              [nzParser]="parserPercent"
              nzSize="small"
            ></nz-input-number>
          </div>
        </div>

        <div class="ant-color-picker-rgb-input" *ngSwitchDefault>
          <div class="ant-color-picker-steppers ant-color-picker-rgb-input">
            <nz-input-number formControlName="rgbR" [nzMin]="0" [nzMax]="255" [nzStep]="1" nzSize="small">
            </nz-input-number>
          </div>
          <div class="ant-color-picker-steppers ant-color-picker-rgb-input">
            <nz-input-number
              formControlName="rgbG"
              [nzMin]="0"
              [nzMax]="255"
              [nzStep]="1"
              nzSize="small"
            ></nz-input-number>
          </div>
          <div class="ant-color-picker-steppers ant-color-picker-rgb-input">
            <nz-input-number
              formControlName="rgbB"
              [nzMin]="0"
              [nzMax]="255"
              [nzStep]="1"
              nzSize="small"
            ></nz-input-number>
          </div>
        </div>
      </div>

      <div class="ant-color-picker-steppers ant-color-picker-alpha-input">
        <nz-input-number
          formControlName="roundA"
          [nzMin]="0"
          [nzMax]="100"
          [nzStep]="1"
          [nzFormatter]="formatterPercent"
          [nzParser]="parserPercent"
          nzSize="small"
        ></nz-input-number>
      </div>
    </div>
  `, isInline: true, dependencies: [{ kind: "directive", type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i2.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "component", type: i3.NzOptionComponent, selector: "nz-option", inputs: ["nzTitle", "nzLabel", "nzValue", "nzKey", "nzDisabled", "nzHide", "nzCustomContent"], exportAs: ["nzOption"] }, { kind: "component", type: i3.NzSelectComponent, selector: "nz-select", inputs: ["nzId", "nzSize", "nzStatus", "nzOptionHeightPx", "nzOptionOverflowSize", "nzDropdownClassName", "nzDropdownMatchSelectWidth", "nzDropdownStyle", "nzNotFoundContent", "nzPlaceHolder", "nzPlacement", "nzMaxTagCount", "nzDropdownRender", "nzCustomTemplate", "nzSuffixIcon", "nzClearIcon", "nzRemoveIcon", "nzMenuItemSelectedIcon", "nzTokenSeparators", "nzMaxTagPlaceholder", "nzMaxMultipleCount", "nzMode", "nzFilterOption", "compareWith", "nzAllowClear", "nzBorderless", "nzShowSearch", "nzLoading", "nzAutoFocus", "nzAutoClearSearchValue", "nzServerSearch", "nzDisabled", "nzOpen", "nzSelectOnTab", "nzBackdrop", "nzOptions", "nzShowArrow"], outputs: ["nzOnSearch", "nzScrollToBottom", "nzOpenChange", "nzBlur", "nzFocus"], exportAs: ["nzSelect"] }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "component", type: i4.NzInputNumberComponent, selector: "nz-input-number", inputs: ["nzSize", "nzMin", "nzMax", "nzParser", "nzPrecision", "nzPrecisionMode", "nzPlaceHolder", "nzStatus", "nzStep", "nzInputMode", "nzId", "nzDisabled", "nzReadOnly", "nzAutoFocus", "nzBorderless", "nzFormatter"], outputs: ["nzBlur", "nzFocus"], exportAs: ["nzInputNumber"] }, { kind: "directive", type: i5.NzInputDirective, selector: "input[nz-input],textarea[nz-input]", inputs: ["nzBorderless", "nzSize", "nzStepperless", "nzStatus", "disabled"], exportAs: ["nzInput"] }, { kind: "component", type: i5.NzInputGroupComponent, selector: "nz-input-group", inputs: ["nzAddOnBeforeIcon", "nzAddOnAfterIcon", "nzPrefixIcon", "nzSuffixIcon", "nzAddOnBefore", "nzAddOnAfter", "nzPrefix", "nzStatus", "nzSuffix", "nzSize", "nzSearch", "nzCompact"], exportAs: ["nzInputGroup"] }, { kind: "directive", type: i5.NzInputGroupWhitSuffixOrPrefixDirective, selector: "nz-input-group[nzSuffix], nz-input-group[nzPrefix]" }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { NzColorFormatComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.10", ngImport: i0, type: NzColorFormatComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'nz-color-format',
                    exportAs: 'NzColorFormat',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <div [formGroup]="validateForm" class="ant-color-picker-input-container">
      <div class="ant-color-picker-format-select">
        <nz-select formControlName="isFormat" nzBorderless nzSize="small">
          <nz-option nzValue="hex" nzLabel="HEX"></nz-option>
          <nz-option nzValue="hsb" nzLabel="HSB"></nz-option>
          <nz-option nzValue="rgb" nzLabel="RGB"></nz-option>
        </nz-select>
      </div>
      <div class="ant-color-picker-input" [ngSwitch]="validateForm.get('isFormat')?.value">
        <div class="ant-color-picker-hex-input" *ngSwitchCase="'hex'">
          <nz-input-group nzPrefix="#" nzSize="small">
            <input nz-input nzSize="small" formControlName="hex" />
          </nz-input-group>
        </div>

        <div class="ant-color-picker-hsb-input" *ngSwitchCase="'hsb'">
          <div class="ant-color-picker-steppers ant-color-picker-hsb-input">
            <nz-input-number
              formControlName="hsbH"
              [nzMin]="0"
              [nzMax]="360"
              [nzStep]="1"
              [nzPrecision]="0"
              nzSize="small"
            ></nz-input-number>
          </div>
          <div class="ant-color-picker-steppers ant-color-picker-hsb-input">
            <nz-input-number
              formControlName="hsbS"
              [nzMin]="0"
              [nzMax]="100"
              [nzStep]="1"
              [nzFormatter]="formatterPercent"
              [nzParser]="parserPercent"
              nzSize="small"
            ></nz-input-number>
          </div>
          <div class="ant-color-picker-steppers ant-color-picker-hsb-input">
            <nz-input-number
              formControlName="hsbB"
              [nzMin]="0"
              [nzMax]="100"
              [nzStep]="1"
              [nzFormatter]="formatterPercent"
              [nzParser]="parserPercent"
              nzSize="small"
            ></nz-input-number>
          </div>
        </div>

        <div class="ant-color-picker-rgb-input" *ngSwitchDefault>
          <div class="ant-color-picker-steppers ant-color-picker-rgb-input">
            <nz-input-number formControlName="rgbR" [nzMin]="0" [nzMax]="255" [nzStep]="1" nzSize="small">
            </nz-input-number>
          </div>
          <div class="ant-color-picker-steppers ant-color-picker-rgb-input">
            <nz-input-number
              formControlName="rgbG"
              [nzMin]="0"
              [nzMax]="255"
              [nzStep]="1"
              nzSize="small"
            ></nz-input-number>
          </div>
          <div class="ant-color-picker-steppers ant-color-picker-rgb-input">
            <nz-input-number
              formControlName="rgbB"
              [nzMin]="0"
              [nzMax]="255"
              [nzStep]="1"
              nzSize="small"
            ></nz-input-number>
          </div>
        </div>
      </div>

      <div class="ant-color-picker-steppers ant-color-picker-alpha-input">
        <nz-input-number
          formControlName="roundA"
          [nzMin]="0"
          [nzMax]="100"
          [nzStep]="1"
          [nzFormatter]="formatterPercent"
          [nzParser]="parserPercent"
          nzSize="small"
        ></nz-input-number>
      </div>
    </div>
  `
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; }, propDecorators: { format: [{
                type: Input
            }], colorValue: [{
                type: Input
            }], clearColor: [{
                type: Input
            }], formatChange: [{
                type: Output
            }], nzOnFormatChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,