{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { StorageService } from 'src/app/auth/service/storage/storage.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst BASIC_URL = [\"http://localhost:8080\"];\nexport class AdminService {\n  constructor(http) {\n    this.http = http;\n  }\n  postCar(carDto) {\n    return this.http.post(BASIC_URL + \"/api/admin/car\", carDto, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  createAuthorizationHeader() {\n    let authHeaders = new HttpHeaders();\n    console.log(StorageService.getToken());\n    return authHeaders.set('Authorization', 'Bearer' + StorageService.getToken());\n  }\n  static #_ = this.ɵfac = function AdminService_Factory(t) {\n    return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminService,\n    factory: AdminService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","StorageService","BASIC_URL","AdminService","constructor","http","postCar","carDto","post","headers","createAuthorizationHeader","authHeaders","console","log","getToken","set","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\practice projects\\car-rental\\car_rental_angular\\src\\app\\modules\\admin\\service\\admin.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { StorageService } from 'src/app/auth/service/storage/storage.service';\n\nconst BASIC_URL = [\"http://localhost:8080\"];\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n\n  constructor(private http: HttpClient ) { }\n\n  postCar(carDto: any): Observable<any>{\n    return this.http.post(BASIC_URL+\"/api/admin/car\", carDto,{\n      headers: this.createAuthorizationHeader()\n    });\n  }\n\n  createAuthorizationHeader(): HttpHeaders {\n    let authHeaders: HttpHeaders = new HttpHeaders();\n    console.log(StorageService.getToken());\n    \n    return authHeaders.set(\n      'Authorization',\n      'Bearer' + StorageService.getToken()\n    );\n  }\n\n}\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,cAAc,QAAQ,8CAA8C;;;AAE7E,MAAMC,SAAS,GAAG,CAAC,uBAAuB,CAAC;AAK3C,OAAM,MAAOC,YAAY;EAEvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAiB;EAEzCC,OAAOA,CAACC,MAAW;IACjB,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAACN,SAAS,GAAC,gBAAgB,EAAEK,MAAM,EAAC;MACvDE,OAAO,EAAE,IAAI,CAACC,yBAAyB;KACxC,CAAC;EACJ;EAEAA,yBAAyBA,CAAA;IACvB,IAAIC,WAAW,GAAgB,IAAIX,WAAW,EAAE;IAChDY,OAAO,CAACC,GAAG,CAACZ,cAAc,CAACa,QAAQ,EAAE,CAAC;IAEtC,OAAOH,WAAW,CAACI,GAAG,CACpB,eAAe,EACf,QAAQ,GAAGd,cAAc,CAACa,QAAQ,EAAE,CACrC;EACH;EAAC,QAAAE,CAAA,G;qBAlBUb,YAAY,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZlB,YAAY;IAAAmB,OAAA,EAAZnB,YAAY,CAAAoB,IAAA;IAAAC,UAAA,EAFX;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}